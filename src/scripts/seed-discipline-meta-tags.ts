import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { getRepositoryToken } from '@nestjs/typeorm';
import { Discipline } from '../modules/discipline/discipline.entity';
import { MetaTag } from '../modules/meta-tag/meta-tag.entity';
import { DisciplineMetaTag } from '../entities/discipline-meta-tag.entity';

const disciplineToMetaTagData = [
  { "DisciplineName": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "MetaTagCode": "MATH_STATS" },
  { "DisciplineName": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢", "MetaTagCode": "CS_AI" },
  { "DisciplineName": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "MetaTagCode": "ENGINEERING_TECH" },
  { "DisciplineName": "–§–∏–∑–∏–∫–∞", "MetaTagCode": "NATURAL_SCIENCES" },
  { "DisciplineName": "–•–∏–º–∏—è", "MetaTagCode": "NATURAL_SCIENCES" },
  { "DisciplineName": "–ë–∏–æ–ª–æ–≥–∏—è", "MetaTagCode": "NATURAL_SCIENCES" },
  { "DisciplineName": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "MetaTagCode": "EARTH_SPACE_ENV" },
  { "DisciplineName": "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "MetaTagCode": "EARTH_SPACE_ENV" },
  { "DisciplineName": "–≠–∫–æ–ª–æ–≥–∏—è", "MetaTagCode": "EARTH_SPACE_ENV" },
  { "DisciplineName": "–ò—Å—Ç–æ—Ä–∏—è", "MetaTagCode": "HUMANITIES_HISTORY" },
  { "DisciplineName": "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "MetaTagCode": "SOCIAL_SCIENCES" },
  { "DisciplineName": "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "MetaTagCode": "SOCIAL_SCIENCES" },
  { "DisciplineName": "–ü—Ä–∞–≤–æ", "MetaTagCode": "SOCIAL_SCIENCES" },
  { "DisciplineName": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "MetaTagCode": "LANGUAGES_LITERATURE" },
  { "DisciplineName": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "MetaTagCode": "LANGUAGES_LITERATURE" },
  { "DisciplineName": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ ‚Äî –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "MetaTagCode": "LANGUAGES_LITERATURE" },
  { "DisciplineName": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ ‚Äî –ù–µ–º–µ—Ü–∫–∏–π", "MetaTagCode": "LANGUAGES_LITERATURE" },
  { "DisciplineName": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ ‚Äî –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "MetaTagCode": "LANGUAGES_LITERATURE" },
  { "DisciplineName": "–ò–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ", "MetaTagCode": "ARTS" },
  { "DisciplineName": "–ú—É–∑—ã–∫–∞", "MetaTagCode": "ARTS" },
  { "DisciplineName": "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞", "MetaTagCode": "HEALTH_SAFETY_PE" },
  { "DisciplineName": "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "MetaTagCode": "HEALTH_SAFETY_PE" }
];

async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);
  
  try {
    const disciplineRepository = app.get(getRepositoryToken(Discipline));
    const metaTagRepository = app.get(getRepositoryToken(MetaTag));
    const disciplineMetaTagRepository = app.get(getRepositoryToken(DisciplineMetaTag));
    
    console.log('üè∑Ô∏è  –ù–∞—á–∏–Ω–∞—é —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å –º–µ—Ç–∞—Ç–µ–≥–∞–º–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ
    const existingCount = await disciplineMetaTagRepository.count();
    if (existingCount > 0) {
      console.log(`‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å ${existingCount} —Å–≤—è–∑–µ–π. –û—á–∏—â–∞—é —Ç–∞–±–ª–∏—Ü—É...`);
      await disciplineMetaTagRepository.clear();
    }
    
    const createdRelations: Array<{
      disciplineName: string;
      metaTagCode: string;
      metaTagName: string;
    }> = [];
    
    for (const relation of disciplineToMetaTagData) {
      // –ù–∞—Ö–æ–¥–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const discipline = await disciplineRepository.findOne({
        where: { DisciplineName: relation.DisciplineName }
      });
      
      if (!discipline) {
        console.log(`‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ "${relation.DisciplineName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞—Ç–µ–≥–∞
      const metaTag = await metaTagRepository.findOne({
        where: { MetaTagCode: relation.MetaTagCode }
      });
      
      if (!metaTag) {
        console.log(`‚ùå –ú–µ—Ç–∞—Ç–µ–≥ "${relation.MetaTagCode}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
      const disciplineMetaTag = disciplineMetaTagRepository.create({
        DisciplineID: discipline.DisciplineID,
        MetaTagCode: relation.MetaTagCode,
        CreatedAt: new Date()
      });
      
      const saved = await disciplineMetaTagRepository.save(disciplineMetaTag);
      createdRelations.push({
        disciplineName: relation.DisciplineName,
        metaTagCode: relation.MetaTagCode,
        metaTagName: metaTag.MetaTagName
      });
      
      console.log(`‚úÖ –°–≤—è–∑–∞–ª: "${relation.DisciplineName}" ‚Üí "${metaTag.MetaTagName}"`);
    }
    
    console.log(`\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${createdRelations.length} —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏ –∏ –º–µ—Ç–∞—Ç–µ–≥–∞–º–∏!`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Ç–∞—Ç–µ–≥–∞–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
    const groupedByMetaTag = createdRelations.reduce((acc, rel) => {
      if (!acc[rel.metaTagCode]) {
        acc[rel.metaTagCode] = {
          name: rel.metaTagName,
          disciplines: []
        };
      }
      acc[rel.metaTagCode].disciplines.push(rel.disciplineName);
      return acc;
    }, {} as Record<string, { name: string, disciplines: string[] }>);
    
    console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø–æ –º–µ—Ç–∞—Ç–µ–≥–∞–º:');
    Object.entries(groupedByMetaTag).forEach(([code, data]) => {
      console.log(`\nüè∑Ô∏è  ${data.name} (${code}):`);
      data.disciplines.forEach(discipline => {
        console.log(`   - ${discipline}`);
      });
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å –º–µ—Ç–∞—Ç–µ–≥–∞–º–∏:', error);
    throw error;
  } finally {
    await app.close();
    process.exit(0);
  }
}

bootstrap();
