version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: nestjs_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nestjs_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nestjs_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nestjs_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nestjs_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nestjs_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Опционально: Redis для кеширования (раскомментировать если нужно)
  # redis:
  #   image: redis:7-alpine
  #   container_name: nestjs_redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - nestjs_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  nestjs_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
