#!/usr/bin/env node

const fs = require('fs');
const { execSync } = require('child_process');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–µ–ø–ª–æ–µ–º...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º package.json
console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Node.js –≤ engines
  if (!packageJson.engines) {
    packageJson.engines = {};
  }
  
  if (!packageJson.engines.node || !packageJson.engines.node.includes('20')) {
    packageJson.engines.node = '>=20.0.0';
    console.log('  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è Node.js –≤ engines');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
  const requiredScripts = {
    'build': 'nest build',
    'start:prod': 'node dist/main'
  };
  
  Object.entries(requiredScripts).forEach(([script, command]) => {
    if (!packageJson.scripts[script]) {
      packageJson.scripts[script] = command;
      console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç "${script}"`);
    }
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  console.log('  ‚úÖ package.json –æ–±–Ω–æ–≤–ª–µ–Ω');
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è package.json:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
const requiredFiles = [
  'Dockerfile',
  'Dockerfile.prod',
  'captain-definition',
  '.dockerignore'
];

requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`  ‚úÖ ${file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  } else {
    console.log(`  ‚ùå ${file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .dockerignore
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .dockerignore...');
const dockerignoreContent = fs.readFileSync('.dockerignore', 'utf8');
const requiredIgnores = ['node_modules', 'dist', '.git', '.env'];

requiredIgnores.forEach(ignore => {
  if (dockerignoreContent.includes(ignore)) {
    console.log(`  ‚úÖ ${ignore} –≤ .dockerignore`);
  } else {
    console.log(`  ‚ùå ${ignore} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .dockerignore`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
if (fs.existsSync('env.example')) {
  const envContent = fs.readFileSync('env.example', 'utf8');
  const requiredEnvVars = [
    'NODE_ENV',
    'PORT',
    'DB_HOST',
    'DB_USERNAME',
    'DB_PASSWORD',
    'DB_NAME',
    'JWT_SECRET',
    'JWT_REFRESH_SECRET'
  ];
  
  requiredEnvVars.forEach(envVar => {
    if (envContent.includes(envVar)) {
      console.log(`  ‚úÖ ${envVar} –≤ env.example`);
    } else {
      console.log(`  ‚ùå ${envVar} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ env.example`);
    }
  });
} else {
  console.log('  ‚ùå env.example –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
}

console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ CapRover —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 3000 –æ—Ç–∫—Ä—ã—Ç –≤ CapRover');
console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ CapRover Dashboard');
